////////****** dot product procedure *******//////////////////////////////////////////////////////////////////
PROCEDURE dot_product_p (v1:ARRAY_OF FLOAT, v2:ARRAY_OF FLOAT, VAR ps: FLOAT)
VAR
    ps:=0
    i: INTEGER
BEGIN
    FOR i FROM 0 TO v1.length-1 STEP 1 DO
    ps := ps + v1[i]*v2[i]
    END_FOR
END

/********** The main program********************************************************************************/

ALGORITHM IsOrthogonal
VAR
    i,j,n : INTEGER
    v1,v2 : ARRAY_OF FLOAT[3] ;
    ps:FLOAT:=0
BEGIN
// Read the n pairs of vectors
    
    Write("give the n pairs vectors: ")
    Read(n)

// Read v1 and v2
FOR i FROM 1 TO n STEP 1  DO
    Read(v1)
    Read(v2)

//Check if the given two vectors are orthogonal or not 
    dot_product_p(v1, v2, ps)
    IF (ps= 0)
        Write(v1 + " and "v2 + " are orthogonal")
    ELSE
        Write("this pair of vectors aren't orthogonal")
    END_IF
    END_FOR
END

////////****** dot product function *******//////////////////////////////////////////////////////////////////
FUNCTION dot_product_f(v1: ARRAY_OF FLOAT, v2; ARRAY_OF FLOAT, ps:INTEGER) : FLOAT
VAR
    ps: FLOAT :=0
    i: INTEGER
BEGIN
    FOR i FROM 0 TO v1.length-1 STEP 1 DO
    ps = ps + v1[i]*v2[i]
    END_FOR

    RETURN ps;
END

/********** The main program********************************************************************************/
ALGORITHM IsOrthogonal
VAR

    i,j,n : INTEGER
    v1,v2 : ARRAY_OF FLOAT[3] ;
    ps: FLOAT:= 0
BEGIN
// Read the n pairs of vectors
    
    Write("give the n pairs vectors: ")
    Read(n)

// Read v1 and v2
FOR i FROM 1 TO n STEP 1  DO
    Read(v1)
    Read(v2)

//Check if the given two vectors are orthogonal or not 
    ps:= dot_product_f(v1, v2, ps)
    IF (ps=0))
        Write(v1 + " and "v2 + " are orthogonal")
    ELSE
        Write("this pair of vectors aren't orthogonal")
    END_IF
    END_FOR
END